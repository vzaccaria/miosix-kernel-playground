diff --git a/main.cpp b/main.cpp
index 8764b9f..bed0550 100644
--- a/main.cpp
+++ b/main.cpp
@@ -1,11 +1,27 @@
 
-#include <cstdio>
-#include "miosix.h"
+// Test code for serialaos driver
 
-using namespace std;
-using namespace miosix;
+#include <cstdio>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <unistd.h>
 
 int main()
 {
-    //iprintf("Hello world, write your application here\n");
+    int fd=open("/dev/serialaos",O_RDWR);
+    if(fd<0) perror("open");
+    else {
+        printf("Open ok\n");
+        for(;;)
+        {
+            char buffer[16];
+            int count=read(fd,buffer,sizeof(buffer));
+            if(count<0) perror("read");
+            else {
+                printf("read %d bytes\n",count);
+                int written=write(fd,buffer,count);
+                if(written<0) perror("write");
+            }
+        }
+    }
 }
diff --git a/miosix/arch/common/drivers/serial_stm32.cpp b/miosix/arch/common/drivers/serial_stm32.cpp
index 28b791c..6cde2ab 100644
--- a/miosix/arch/common/drivers/serial_stm32.cpp
+++ b/miosix/arch/common/drivers/serial_stm32.cpp
@@ -82,23 +82,24 @@ void __attribute__((naked)) USART1_IRQHandler()
 
 #if !defined(STM32_NO_SERIAL_2_3)
 
-/**
- * \internal interrupt routine for usart2 actual implementation
- */
-void __attribute__((noinline)) usart2irqImpl()
-{
-   if(ports[1]) ports[1]->IRQhandleInterrupt();
-}
-
-/**
- * \internal interrupt routine for usart2
- */
-void __attribute__((naked)) USART2_IRQHandler()
-{
-    saveContext();
-    asm volatile("bl _Z13usart2irqImplv");
-    restoreContext();
-}
+// This interrupt conflicts with the AOS example driver for USART2
+// /**
+//  * \internal interrupt routine for usart2 actual implementation
+//  */
+// void __attribute__((noinline)) usart2irqImpl()
+// {
+//    if(ports[1]) ports[1]->IRQhandleInterrupt();
+// }
+//
+// /**
+//  * \internal interrupt routine for usart2
+//  */
+// void __attribute__((naked)) USART2_IRQHandler()
+// {
+//     saveContext();
+//     asm volatile("bl _Z13usart2irqImplv");
+//     restoreContext();
+// }
 
 #if !defined(STM32F411xE) && !defined(STM32F401xE) && !defined(STM32F401xC)
 /**
diff --git a/miosix/arch/cortexM4_stm32f4/stm32f407vg_stm32f4discovery/drivers/serial_aos.cpp b/miosix/arch/cortexM4_stm32f4/stm32f407vg_stm32f4discovery/drivers/serial_aos.cpp
new file mode 100644
index 0000000..fb0f2f0
--- /dev/null
+++ b/miosix/arch/cortexM4_stm32f4/stm32f407vg_stm32f4discovery/drivers/serial_aos.cpp
@@ -0,0 +1,143 @@
+/***************************************************************************
+ *   Copyright (C) 2021 by Terraneo Federico                               *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   As a special exception, if other files instantiate templates or use   *
+ *   macros or inline functions from this file, or you compile this file   *
+ *   and link it with other works to produce a work based on this file,    *
+ *   this file does not by itself cause the resulting work to be covered   *
+ *   by the GNU General Public License. However the source code for this   *
+ *   file must still be made available in accordance with the GNU General  *
+ *   Public License. This exception does not invalidate any other reasons  *
+ *   why a work based on this file might be covered by the GNU General     *
+ *   Public License.                                                       *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, see <http://www.gnu.org/licenses/>   *
+ ***************************************************************************/ 
+
+#include <mutex>
+#include "serial_aos.h"
+#include "kernel/queue.h"
+#include "interfaces/gpio.h"
+#include "kernel/scheduler/scheduler.h"
+
+using namespace std;
+using namespace miosix;
+
+static mutex txMutex;          ///< Mutex locked during transmission
+static mutex rxMutex;          ///< Mutex locked during reception
+static Queue<char,64> rxQueue; ///< Queue between rx interrupt and readBlock
+
+/**
+ * \internal interrupt routine for usart2 actual implementation
+ */
+void __attribute__((noinline)) usart2irqImpl()
+{
+   unsigned int status=USART2->SR;
+    if(status & USART_SR_RXNE)
+    {
+        //Reading the character also clears the interrupt flag
+        char c=USART2->DR;
+        if((status & USART_SR_FE)==0)
+        {
+            bool hppw;
+            if(rxQueue.IRQput(c,hppw)==false) /*fifo overflow*/;
+            if(hppw) Scheduler::IRQfindNextThread();
+        }
+    }
+}
+
+/**
+ * \internal interrupt routine for usart2. This is called by the hardware
+ */
+void __attribute__((naked)) USART2_IRQHandler()
+{
+    saveContext();
+    asm volatile("bl _Z13usart2irqImplv");
+    restoreContext();
+}
+
+//
+// class SerialAOS
+//
+
+SerialAOS::SerialAOS() : Device(Device::TTY)
+{
+    //Some of the registers we're accessing are shared among many peripherals
+    //and this code fragment is so short that disabling interrupts is recomended
+    InterruptDisableLock dLock;
+
+    //Claim GPIOs for our serial port
+    using u2tx=Gpio<GPIOA_BASE,2>;
+    using u2rx=Gpio<GPIOA_BASE,3>;
+    u2tx::mode(Mode::ALTERNATE);
+    u2rx::mode(Mode::ALTERNATE);
+    u2tx::alternateFunction(7);
+    u2rx::alternateFunction(7);
+    
+    //Enable clock gating for the serial port peripheral
+    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
+    
+    //Set our port speed. We want 19200 bit/s. We need to divide serial port
+    //peripheral input clock (42MHz) by a factor that gives 16 times 19200Hz
+    //(the 16 times requirements is just because that's how this peripheral
+    //works) 42MHz / (19200*16) = 136.72, approximated to 136 and 12/16.
+    USART2->BRR=136<<4 | 12;
+
+    USART2->CR1 = USART_CR1_UE     //Enable port
+                | USART_CR1_RXNEIE //Interrupt on data received
+                | USART_CR1_TE     //Transmission enbled
+                | USART_CR1_RE;    //Reception enabled
+    
+    //Finally, we need to set up the interrupt controller
+    NVIC_SetPriority(USART2_IRQn,15); //Lowest priority for serial
+    NVIC_EnableIRQ(USART2_IRQn);
+}
+
+ssize_t SerialAOS::writeBlock(const void *buffer, size_t size, off_t where)
+{
+    //To protect against multiple threads calling this function
+    unique_lock<mutex> l(txMutex);
+
+    //Simplest possible implementation, poor performance: serial ports are slow
+    //compared to the CPU, so using polling to send data one chracter at a time
+    //is wasteful. The piece that is missing here is to set up the DMA to send
+    //the entire buffer in hardware and give us a DMA end of transfer interrupt
+    //when the job is done. We are omitting DMA for simplicity.
+    const char *buf=reinterpret_cast<const char*>(buffer);
+    for(size_t i=0;i<size;i++)
+    {
+        while((USART2->SR & USART_SR_TXE)==0) ;
+        USART2->DR=*buf++;
+    }
+    return size;
+}
+
+ssize_t SerialAOS::readBlock(void *buffer, size_t size, off_t where)
+{
+    if(size<1) return 0;
+    //To protect against multiple threads calling this function
+    unique_lock<mutex> l(rxMutex);
+
+    //Simplest possible implementation, poor performance: this time we DO block
+    //waiting for data instead of polling (the blocking is hidden in the
+    //synchronized queue) but we return after having read only one character.
+    //We should try to fill as many bytes of the buffer as possible, BUT also
+    //return prematurely if no more chracter arrive. The piece that is missing
+    //here is using the peripheral idle line detection, omitted for simplicity.
+    char *buf=reinterpret_cast<char*>(buffer);
+    char c;
+    rxQueue.get(c);
+    buf[0]=c;
+    return 1;
+}
diff --git a/miosix/arch/cortexM4_stm32f4/stm32f407vg_stm32f4discovery/drivers/serial_aos.h b/miosix/arch/cortexM4_stm32f4/stm32f407vg_stm32f4discovery/drivers/serial_aos.h
new file mode 100644
index 0000000..0506c19
--- /dev/null
+++ b/miosix/arch/cortexM4_stm32f4/stm32f407vg_stm32f4discovery/drivers/serial_aos.h
@@ -0,0 +1,62 @@
+/***************************************************************************
+ *   Copyright (C) 2021 by Terraneo Federico                               *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   As a special exception, if other files instantiate templates or use   *
+ *   macros or inline functions from this file, or you compile this file   *
+ *   and link it with other works to produce a work based on this file,    *
+ *   this file does not by itself cause the resulting work to be covered   *
+ *   by the GNU General Public License. However the source code for this   *
+ *   file must still be made available in accordance with the GNU General  *
+ *   Public License. This exception does not invalidate any other reasons  *
+ *   why a work based on this file might be covered by the GNU General     *
+ *   Public License.                                                       *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, see <http://www.gnu.org/licenses/>   *
+ ***************************************************************************/ 
+
+#pragma once
+
+#include "filesystem/console/console_device.h"
+
+/**
+ * Simplified serial port driver for the AOS course.
+ *
+ * Classes of this type are reference counted, must be allocated on the heap
+ * and managed through intrusive_ref_ptr<FileBase>
+ */
+class SerialAOS : public miosix::Device
+{
+public:
+    SerialAOS();
+
+    /**
+     * Write a block of data
+     * \param buffer buffer where take data to write
+     * \param size buffer size
+     * \param where where to write to (ignored in TTY devices)
+     * \return number of bytes written or a negative number on failure
+     */
+    ssize_t writeBlock(const void *buffer, size_t size, off_t where);
+
+    /**
+     * Read a block of data
+     * \param buffer buffer where read data will be stored
+     * \param size buffer size
+     * \param where where to read from (ignored in TTY devices)
+     * \return number of bytes read or a negative number on failure. Note that
+     * it is normal for this function to return less character than the amount
+     * asked
+     */
+    ssize_t readBlock(void *buffer, size_t size, off_t where);
+};
diff --git a/miosix/arch/cortexM4_stm32f4/stm32f407vg_stm32f4discovery/interfaces-impl/bsp.cpp b/miosix/arch/cortexM4_stm32f4/stm32f407vg_stm32f4discovery/interfaces-impl/bsp.cpp
index 00bd3b6..e44cbbf 100644
--- a/miosix/arch/cortexM4_stm32f4/stm32f407vg_stm32f4discovery/interfaces-impl/bsp.cpp
+++ b/miosix/arch/cortexM4_stm32f4/stm32f407vg_stm32f4discovery/interfaces-impl/bsp.cpp
@@ -46,6 +46,7 @@
 #include "drivers/serial.h"
 #include "drivers/sd_stm32f2_f4.h"
 #include "board_settings.h"
+#include "drivers/serial_aos.h"
 
 namespace miosix {
 
@@ -84,14 +85,10 @@ void IRQbspInit()
 void bspInit2()
 {
     #ifdef WITH_FILESYSTEM
-    #ifdef AUX_SERIAL
     intrusive_ref_ptr<DevFs> devFs=basicFilesystemSetup(SDIODriver::instance());
-    devFs->addDevice(AUX_SERIAL,
-        intrusive_ref_ptr<Device>(new STM32Serial(2,auxSerialSpeed,
-        auxSerialFlowctrl ? STM32Serial::RTSCTS : STM32Serial::NOFLOWCTRL)));
-    #else //AUX_SERIAL
-    basicFilesystemSetup(SDIODriver::instance());
-    #endif //AUX_SERIAL
+    
+    //Will be available as /dev/serialaos
+    devFs->addDevice("serialaos",intrusive_ref_ptr<Device>(new SerialAOS));
     #endif //WITH_FILESYSTEM
 }
 
diff --git a/miosix/config/Makefile.inc b/miosix/config/Makefile.inc
index b2d67a0..4b6982f 100644
--- a/miosix/config/Makefile.inc
+++ b/miosix/config/Makefile.inc
@@ -17,7 +17,7 @@
 #OPT_BOARD := stm32f100rb_stm32vldiscovery
 #OPT_BOARD := stm32f103ve_strive_mini
 #OPT_BOARD := stm32f103ze_redbull_v2
-#OPT_BOARD := stm32f407vg_stm32f4discovery
+OPT_BOARD := stm32f407vg_stm32f4discovery
 #OPT_BOARD := stm32f207ig_stm3220g-eval
 #OPT_BOARD := stm32f207zg_ethboard_v2
 #OPT_BOARD := stm32f207ze_als_camboard
@@ -1324,6 +1324,7 @@ else ifeq ($(ARCH),cortexM4_stm32f4)
         arch/common/drivers/stm32f2_f4_i2c.cpp       \
         arch/common/drivers/stm32_hardware_rng.cpp   \
         arch/common/drivers/servo_stm32.cpp          \
+        $(BOARD_INC)/drivers/serial_aos.cpp          \
         $(BOARD_INC)/interfaces-impl/bsp.cpp
 
         ## Add a #define to allow querying board name
diff --git a/miosix/config/miosix_settings.h b/miosix/config/miosix_settings.h
index 45c2f4c..dcb9b88 100644
--- a/miosix/config/miosix_settings.h
+++ b/miosix/config/miosix_settings.h
@@ -34,7 +34,7 @@
 // The PARSING_FROM_IDE is because Netbeans gets confused by this, it is never
 // defined when compiling the code.
 #ifndef PARSING_FROM_IDE
-#error This error is a reminder that you have not edited miosix_settings.h yet.
+//#error This error is a reminder that you have not edited miosix_settings.h yet.
 #endif //PARSING_FROM_IDE
 
 /**
@@ -149,7 +149,7 @@ const unsigned char MAX_OPEN_FILES=8;
  * mode, so to use debugging it is necessary to disable sleep in the idle thread.
  * By default it is not defined (idle thread calls sleep).
  */
-//#define JTAG_DISABLE_SLEEP
+#define JTAG_DISABLE_SLEEP
 
 /// Minimum stack size (MUST be divisible by 4)
 const unsigned int STACK_MIN=256;
